scale_color_brewer(palette = "Set3"
plot(RaMod, type = "trace", theta_lim = c(-4,4)) +
scale_color_brewer(palette = "Set3")
plot(RaMod, type = "trace", theta_lim = c(-4,4))
plot(RaMod, item.subset=c(1), type = "trace", theta_lim = c(-4,4))
plot(RaMod, item.subset=1, type = "trace", theta_lim = c(-4,4))
plotICC(RaMod, item.subset=1, type = "trace", theta_lim = c(-4,4))
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(devtools, irtoys, coda, mirt, ggmirt, tidyverse,eRm)
install.packages(c("dbplyr", "GPArotation", "gtable", "hms", "ps"))
plotICC(RaMod, item.subset=1, type = "trace", theta_lim = c(-4,4))
plotICC(RaMod, item.subset="all", type = "trace", theta_lim = c(-4,4))
plot(RaMod, type = "trace", theta_lim = c(-4,4))
library(birtr)
detach("package:birtr", unload = TRUE)
View(RaMod)
ui <- fluidPage(
withMathJax(),
helpText('The Equation for a Rasch Model'),
uiOutput('ex1'),
textOutput("PL"),
actionButton(inputId = "symbols", label = "Click here")
)
server <- function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('$$p\\left(x_j = 1|\\theta,\\alpha,\\delta_j\\right) = \\frac{e^{(\\theta-\\delta_j)}}{1 + e^{(\\theta-\\delta_j)}}$$'))
})
observeEvent(input$symbols, {
showModal(modalDialog(
title = "Symbol Definitions",
tags$head(tags$style("#shiny-modal img {max-width: 100%;}")),
tags$img(
src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/2023-02-28_14-10-27.jpg", mime = "image/jpeg"),
alt = "Table with statistical symbols"),
easyClose = TRUE,
footer = NULL
))
})
output$PL <- renderText({
paste("Note: The IPL equation only differs from the Rasch by not constraining item discrimination (α) to 1.")
})
}
shinyApp(ui = ui, server = server)
ggplot(RaMod, aes(Theta, P.1, colour = item)) +
geom_line() +
ggtitle('Probability Tracelines') +
xlab(expression(theta)) +
ylab(expression(P(theta))) +
geom_hline(aes(yintercept = 0.5)) + theme_bw() +
theme(text = element_text(size=16),
axis.text.x=element_text(colour="black"),
axis.text.y=element_text(colour="black"),
legend.title=element_blank())
ggplot(RaMod, aes(Theta, colour = item)) +
geom_line() +
ggtitle('Probability Tracelines') +
xlab(expression(theta)) +
ylab(expression(P(theta))) +
geom_hline(aes(yintercept = 0.5)) + theme_bw() +
theme(text = element_text(size=16),
axis.text.x=element_text(colour="black"),
axis.text.y=element_text(colour="black"),
legend.title=element_blank())
?plot
plot(RaMod, 1, type = "trace", theta_lim = c(-4,4))
mirt::itemplot(RaMod, 1, type = "trace", shiny = TRUE)
mirt::itemplot(RaMod, 1, type = "trace", shiny = TRUE)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE, par.settings = minty)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = green)))
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "green")))
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "teal")))
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "lightgreen")))
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine4")))
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
mirt::itemplot(RaMod, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
mirt::itemplot(RaMod, 1:20, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
mirt::itemplot(RaMod, "all", type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
mirt::itemplot(RaMod, item = "all", type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
mirt::itemplot(RaMod, item = c(1:20), type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
mirt::itemplot(RaMod, item = "Item", type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")), main="ICC for Item 1")
plot(RaMod, 1, type = "trace", theta_lim = c(-4,4))
plot(RaMod, type = "trace", theta_lim = c(-4,4))
mirt::itemplot(RaMod, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
mirt::itemplot(RaMod, all, type = "trace", shiny = FALSE, par.settings = list(superpose.line = list(col = "aquamarine1")))
plot(RaMod, type = "trace", theta_lim = c(-4,4), par.settings = list(superpose.line = list(col = "aquamarine1")), main="ICC for Item 1")
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="ICC for Item 1",
xlab="Ability", ylab="Probability",
)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="ICC for Item 1",
xlab="Ability", ylab="Probability"
)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="ICC for Item 1",
xlab ="Ability", ylab ="Probability"
)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="Item Characteristic Curve for Item 1",
xlab ="Latent Ability", ylab ="Probability of Solving Item"
)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="Item Characteristic Curve for Item 1"
)
# Chunk 1: setup
library(flexdashboard)
library(pacman)
pacman::p_load(knitr, RColorBrewer, ltm, psych, flexdashboard, leaflet, thematic, shiny, shinyalert, irtoys, xtable, tinytex, xfun, plotly, ShinyItemAnalysis, coda, mirt, ggmirt, tidyverse)
thematic::thematic_rmd()
# Chunk 2
# Chunk 3: shinEq
ui <- fluidPage(
withMathJax(),
helpText('The Equation for a Rasch Model'),
uiOutput('ex1'),
textOutput("PL"),
actionButton(inputId = "symbols", label = "Click here")
)
server <- function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('$$p\\left(x_j = 1|\\theta,\\alpha,\\delta_j\\right) = \\frac{e^{(\\theta-\\delta_j)}}{1 + e^{(\\theta-\\delta_j)}}$$'))
})
observeEvent(input$symbols, {
showModal(modalDialog(
title = "Symbol Definitions",
tags$head(tags$style("#shiny-modal img {max-width: 100%;}")),
tags$img(
src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/2023-02-28_14-10-27.jpg", mime = "image/jpeg"),
alt = "Table with statistical symbols"),
easyClose = TRUE,
footer = NULL
))
})
output$PL <- renderText({
paste("Note: The IPL equation only differs from the Rasch by not constraining item discrimination (α) to 1.")
})
}
shinyApp(ui = ui, server = server)
# Chunk 4: emsim
# embed a single file
xfun::embed_file('/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Data/irtSIM.csv')
# Chunk 5: sd1
#item discrimination (needs to be fixed to 1 for Rasch model), item difficulty, and number of items
set.seed(5878)
iSim1 <- cbind(runif(20,1,1), runif(20,0,1), rep(0,20))
head(iSim1)
# Chunk 6: sd2
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30))
head(iSim2)
# Chunk 7: renameC
#rename columns for plotting
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
head(iSim2)
# Chunk 8: RM1
unimodel <- mirt.model("latent = 1-20")
RaMod <- mirt::mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
RaMod
# Chunk 9: Pability
# Chunk 10: Tthreshes
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="Item Characteristic Curve for Item 1"
)
# Chunk 11
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
print(items.rasch)
# Chunk 12
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="Item Characteristic Curve for Item 1"
)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="Item Characteristic Curve for Item 1"
)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
print(items.rasch)
unimodel <- mirt.model("latent = 1-20")
RaMod <- mirt::mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
RaMod
library(flexdashboard)
library(pacman)
pacman::p_load(knitr, RColorBrewer, ltm, psych, flexdashboard, leaflet, thematic, shiny, shinyalert, irtoys, xtable, tinytex, xfun, plotly, ShinyItemAnalysis, coda, mirt, ggmirt, tidyverse)
thematic::thematic_rmd()
detach("package:mirt", unload = TRUE)
remove.packages("mirt")
install.packages("mirt")
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "coral1")),
main="Item Characteristic Curve for Item 1"
)
mirt::itemplot(RaMod, 1, type = "trace", shiny = FALSE,
par.settings = list(superpose.line = list(col = "aquamarine1")),
main="Item Characteristic Curve for Item 1"
)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(devtools, irtoys, coda, mirt, ggmirt, tidyverse,eRm)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
head(IR2)
print(items.rasch)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
IR3 <- colnames(IR2)[1] <- "alpha - Item Discrimination Parameter"
head(IR3)
print(items.rasch)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
IR3 <- colnames(IR2)[1] <- "alpha - Item Discrimination Parameter"
print(IR3)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "alpha - Item Discrimination Parameter"
print(IR2)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "alpha - Item Discrimination Parameter"
colnames(IR2)[2] <- "theta - Item Location Parameter (Student Ability)"
print(IR2)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "alpha
- Item Discrimination Parameter"
colnames(IR2)[2] <- "theta
- Item Location Parameter (Student Ability)"
print(IR2)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "Item Discrimination Parameter"
colnames(IR2)[2] <- "Item Location Parameter"
print(IR2)
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "Item Discrimination Parameter"
colnames(IR2)[2] <- "Item Location Parameter"
print(IR2)
include_graphics("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/svw92xte.jpg")
library(knitr)
knitr::include_graphics("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/svw92xte.jpg")
coef.rasch <- coef(RaMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "Item Discrimination Parameter"
colnames(IR2)[2] <- "Student Location Parameter"
print(IR2)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
install.packages(c("distributional", "dplyr", "dtplyr", "googledrive", "modelr", "pillar", "vctrs"))
# define user interface object
ui <- fluidPage(
*Input(inputId = myinput, label = mylabel, ...)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze!", style = "color:aquamarine1")),
sidebarLayout(
sidebarPanel("Upload Your Data"),
mainPanel("IRT ICC Plot and Table")
)
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze!", style = "color:aqua")),
sidebarLayout(
sidebarPanel("Upload Your Data"),
mainPanel("IRT ICC Plot and Table")
)
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data"),
mainPanel("IRT ICC Plot and Table")
)
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data", src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png", mime = "image/png")),
mainPanel("ICC Plot and Item Parameter Table")
)
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data", img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png", mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table")
)
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data", img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png", mime = "image/png", width = "70px", height = "70px"))),
mainPanel("ICC Plot and Item Parameter Table")
)
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data", img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",  width = "70px", height = "70px"))),
mainPanel("ICC Plot and Item Parameter Table")
)
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data", img(src = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png", width = "70px", height = "70px")),
mainPanel("ICC Plot and Item Parameter Table")
)
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data",
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png",
width = "70px",
height = "70px")))),
mainPanel("ICC Plot and Item Parameter Table")
)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data",
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png")))),
mainPanel("ICC Plot and Item Parameter Table")
)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data"),
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
mainPanel("main panel for outputs")
)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data", img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
mainPanel("ICC Plot and Item Parameter Table")
)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data",
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com"), "."),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
mainPanel("ICC Plot and Item Parameter Table")
)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data",
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
mainPanel("ICC Plot and Item Parameter Table")
)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel("Upload Your Data",
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
#*Input(inputId = myinput, label = mylabel, ...)
#*Output(outputId = myoutput, ...)
mainPanel("ICC Plot and Item Parameter Table")
)
)
# define server() function
server <- function(input, output){
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
simA <- read.csv("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/MalcomIRTshiny/Data/irtSIM.csv", sep = " ")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
simA <- read.csv("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/MalcomIRTshiny/Data/irtSIM.csv", sep = " ")
setwd("~/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers")
simA <- read.csv("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/MalcomIRTshiny/Data/irtSIM.csv", sep = " ")
setwd("~/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Data")
simA <- read.csv("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/MalcomIRTshiny/Data/irtSIM.csv", sep = " ")
setwd("~/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
simA <- read.csv("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/MalcomIRTshiny/Data/irtSIM.csv", sep = " ")
knitr::opts_chunk$set(echo = TRUE)
simA <- read.csv("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/MalcomIRTshiny/Data/irtSIM.csv", sep = " ")
setwd("~/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers")
simA <- read.csv("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/MalcomIRTshiny/Data/irtSIM.csv", sep = " ")
simA <- read.csv("/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/MalcomIRTshiny/Data/irtSIM.csv", sep = "")
