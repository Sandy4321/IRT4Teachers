SE = TRUE) # Verbose = False stops from printing the iterations
coef.rasch <- coef(myMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "Item Discrimination Parameter"
colnames(IR2)[2] <- "Item Location Parameter"
print(IR2)
}, rownames = TRUE)
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
plotOutput('irtICC'),
tableOutput("irtPT")
)
)
)
# define server() function
server <- function(input, output){
output$irtICC <- renderPlot({
colnames(simA) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = simA,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
plot(myMod, type = "trace", theta_lim = c(-4,4), par.settings = list(superpose.line = list(col = "aquamarine1")), main="ICCs for All Items")
})
output$irtPT <- renderTable({
colnames(simA) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = simA,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
coef.rasch <- coef(myMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "Item Discrimination Parameter"
colnames(IR2)[2] <- "Item Location Parameter"
print(IR2)
}, rownames = TRUE)
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
plotOutput('irtICC'),
tableOutput("irtPT")
)
)
)
# define server() function
server <- function(input, output){
mydata <- reactive({
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtICC <- renderPlot({
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = mydata,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
plot(myMod, type = "trace", theta_lim = c(-4,4), par.settings = list(superpose.line = list(col = "aquamarine1")), main="ICCs for All Items")
})
output$irtPT <- renderTable({
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = mydata,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
coef.rasch <- coef(myMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "Item Discrimination Parameter"
colnames(IR2)[2] <- "Item Location Parameter"
print(IR2)
}, rownames = TRUE)
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(mirt)
library(purrr)
simA <- read.csv(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Data/irtSIM.csv", sep = " ",  header = FALSE)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
plotOutput("irtICC"),
tableOutput("irtPT")
)
)
)
# define server() function
server <- function(input, output){
mydata <- reactive({
if (input$dataset == "mydata")
return(NULL)
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtICC <- renderPlot({
if (is.null(mydata()))
return(NULL)
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = mydata,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
plot(myMod, type = "trace", theta_lim = c(-4,4), par.settings = list(superpose.line = list(col = "aquamarine1")), main="ICCs for All Items")
})
output$irtPT <- renderTable({
if (is.null(mydata()))
return(NULL)
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = mydata,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
coef.rasch <- coef(myMod, IRTpars=TRUE, simplify=TRUE)
items.rasch <- as.data.frame(coef.rasch$items)
IR2 <- items.rasch %>% select(-c(g, u))
colnames(IR2)[1] <- "Item Discrimination Parameter"
colnames(IR2)[2] <- "Item Location Parameter"
print(IR2)
}, rownames = TRUE)
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
tableOutput("irtPT")
)
)
)
server <- function(input, output){
mydata <- reactive({
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtPT <- renderPrint({
unimodel <- mirt.model("latent = ")
modT2 <- mirt::mirt(data = mydata,
model = unimodel,
itemtype = "Rasch",
SE = TRUE)
coef.rasch3 <- coef(modT2, IRTpars=TRUE, simplify=TRUE)
items.rasch3 <- as.data.frame(coef.rasch3$items)
IR3e <- items.rasch3 %>% select(-c("g", "u"))
colnames(IR3e)[1] <- "Item Discrimination Parameter"
colnames(IR3e)[2] <- "Item Location Parameter"
})
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
plotOutput("irtICC"),
tableOutput("irtPT")
)
)
)
# define server() function
server <- function(input, output){
mydata <- reactive({
if (input$dataset == "mydata")
return(NULL)
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtICC <- renderPlot({
if (is.null(mydata()))
return(NULL)
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = mydata,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
plot(myMod, type = "trace", theta_lim = c(-4,4), par.settings = list(superpose.line = list(col = "aquamarine1")), main="ICCs for All Items")
})
output$irtPT <- renderTable({
if (is.null(mydata()))
return(NULL)
unimodel <- mirt.model("latent = ")
modT2 <- mirt::mirt(data = mydata,
model = unimodel,
itemtype = "Rasch",
SE = TRUE)
coef.rasch3 <- coef(modT2, IRTpars=TRUE, simplify=TRUE)
items.rasch3 <- as.data.frame(coef.rasch3$items)
IR3e <- items.rasch3 %>% select(-c("g", "u"))
colnames(IR3e)[1] <- "Item Discrimination Parameter"
colnames(IR3e)[2] <- "Item Location Parameter"
print(IR3e)
}, rownames = TRUE)
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
tableOutput("irtPT")
)
)
)
server <- function(input, output){
mydata <- reactive({
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtPT <- renderPrint({
unimodel <- mirt.model("latent = ")
modT2 <- mirt::mirt(data = mydata,
model = unimodel,
itemtype = "Rasch",
SE = TRUE)
coef.rasch3 <- coef(modT2, IRTpars=TRUE, simplify=TRUE)
items.rasch3 <- as.data.frame(coef.rasch3$items)
IR3e <- items.rasch3 %>% select(-c("g", "u"))
colnames(IR3e)[1] <- "Item Discrimination Parameter"
colnames(IR3e)[2] <- "Item Location Parameter"
print(IR3e)
}), rownames = TRUE
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(mirt)
library(purrr)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
plotOutput("irtICC"),
tableOutput("irtPT")
)
)
)
# define server() function
server <- function(input, output){
mydata <- reactive({
if (input$dataset == "mydata")
return(NULL)
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtICC <- renderPlot({
if (is.null(mydata()))
return(NULL)
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = mydata(),
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
plot(myMod, type = "trace", theta_lim = c(-4,4), par.settings = list(superpose.line = list(col = "aquamarine1")), main="ICCs for All Items")
})
output$irtPT <- renderTable({
if (is.null(mydata()))
return(NULL)
unimodel <- mirt.model("latent = ")
modT2 <- mirt::mirt(data = mydata(),
model = unimodel,
itemtype = "Rasch",
SE = TRUE)
coef.rasch3 <- coef(modT2, IRTpars=TRUE, simplify=TRUE)
items.rasch3 <- as.data.frame(coef.rasch3$items)
IR3e <- items.rasch3 %>% select(-c("g", "u"))
colnames(IR3e)[1] <- "Item Discrimination Parameter"
colnames(IR3e)[2] <- "Item Location Parameter"
print(IR3e)
}, rownames = TRUE)
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
tableOutput("irtPT")
)
)
)
server <- function(input, output){
mydata <- reactive({
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtPT <- renderPrint({
unimodel <- mirt.model("latent = ")
modT2 <- mirt::mirt(data = mydata(),
model = unimodel,
itemtype = "Rasch",
SE = TRUE)
coef.rasch3 <- coef(modT2, IRTpars=TRUE, simplify=TRUE)
items.rasch3 <- as.data.frame(coef.rasch3$items)
IR3e <- items.rasch3 %>% select(-c("g", "u"))
colnames(IR3e)[1] <- "Item Discrimination Parameter"
colnames(IR3e)[2] <- "Item Location Parameter"
print(IR3e)
}, rownames = TRUE)
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
tableOutput("irtPT")
)
)
)
server <- function(input, output){
mydata <- reactive({
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtPT <- renderPrint({
unimodel <- mirt.model("latent = ")
modT2 <- mirt::mirt(data = mydata(),
model = unimodel,
itemtype = "Rasch",
SE = TRUE)
coef.rasch3 <- coef(modT2, IRTpars=TRUE, simplify=TRUE)
items.rasch3 <- as.data.frame(coef.rasch3$items)
IR3e <- items.rasch3 %>% select(-c("g", "u"))
colnames(IR3e)[1] <- "Item Discrimination Parameter"
colnames(IR3e)[2] <- "Item Location Parameter"
print(IR3e)
})
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(mirt)
library(purrr)
simA <- read.csv(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Data/irtSIM.csv", sep = " ",  header = FALSE)
View(simA)
#my_func1 <- function(
unimodel <- mirt.model("latent = ")
modT2 <- mirt::mirt(as.numeric(data = simA),
model = unimodel,
itemtype = "Rasch",
SE = TRUE)
# define user interface object
ui <- fluidPage(
titlePanel(p("Let's Analyze with IRT!", style = "color:teal")),
sidebarLayout(
sidebarPanel(
h3("Upload Your Data"),
h5(em("Remember your data should be a matrix with dichotomous responses of 0 or 1 stored in a .csv file")),
fileInput(inputId = "filedata",
label = "Choose csv file",
accept = c(".csv")),
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com")),
img(src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/shinyLogo.png",
mime = "image/png"))),
mainPanel("ICC Plot and Item Parameter Table",
plotOutput("irtICC"),
tableOutput("irtPT")
)
)
)
# define server() function
server <- function(input, output){
mydata <- reactive({
if (input$dataset == "mydata")
return(NULL)
req(input$filedata)
read.csv(input$filedata$datapath,  header = FALSE)
})
output$irtICC <- renderPlot({
if (is.null(mydata()))
return(NULL)
unimodel <- mirt::mirt.model("latent = 1-20")
myMod <- mirt::mirt(data = mydata(),
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # Verbose = False stops from printing the iterations
plot(myMod, type = "trace", theta_lim = c(-4,4), par.settings = list(superpose.line = list(col = "aquamarine1")), main="ICCs for All Items")
})
output$irtPT <- renderTable({
if (is.null(mydata()))
return(NULL)
unimodel <- mirt.model("latent = ")
modT2 <- mirt::mirt(data = mydata(),
model = unimodel,
itemtype = "Rasch",
SE = TRUE)
coef.rasch3 <- coef(modT2, IRTpars=TRUE, simplify=TRUE)
items.rasch3 <- as.data.frame(coef.rasch3$items)
IR3e <- items.rasch3 %>% select(-c("g", "u"))
colnames(IR3e)[1] <- "Item Discrimination Parameter"
colnames(IR3e)[2] <- "Item Location Parameter"
print(IR3e)
})
}
# call to shinyApp() which returns the Shiny app
shinyApp(ui = ui, server = server)
