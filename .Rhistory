library(flexdashboard)
library(pacman)
pacman::p_load("knitr", "TAM", "WrightMap", "RColorBrewer", "ltm", "psych", "flexdashboard", "leaflet", thematic, shiny, shinyalert, irtoys, xtable, tinytex, xfun, plotly, ShinyItemAnalysis)
thematic::thematic_rmd()
ui <- fluidPage(
withMathJax(),
helpText('The Equation for a Rasch Model'),
uiOutput('ex1'),
textOutput("PL"),
actionButton(inputId = "symbols", label = "Click here")
)
server <- function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('$$p\\left(x_j = 1|\\theta,\\alpha,\\delta_j\\right) = \\frac{e^{(\\theta-\\delta_j)}}{1 + e^{(\\theta-\\delta_j)}}$$'))
})
observeEvent(input$symbols, {
showModal(modalDialog(
title = "Symbol Definitions",
tags$head(tags$style("#shiny-modal img {max-width: 100%;}")),
tags$img(
src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/2023-02-28_14-10-27.jpg", mime = "image/jpeg"),
alt = "Table with statistical symbols"),
easyClose = TRUE,
footer = NULL
))
})
output$PL <- renderText({
paste("Note: The IPL equation only differs from the Rasch by not constraining item discrimination (α) to 1.")
})
}
shinyApp(ui = ui, server = server)
library(flexdashboard)
library(pacman)
pacman::p_load("knitr", "TAM", "WrightMap", "RColorBrewer", "ltm", "psych", "flexdashboard", "leaflet", thematic, shiny, shinyalert, irtoys, xtable, tinytex, xfun, plotly, ShinyItemAnalysis)
thematic::thematic_rmd()
ui <- fluidPage(
withMathJax(),
helpText('The Equation for a Rasch Model'),
uiOutput('ex1'),
textOutput("PL"),
actionButton(inputId = "symbols", label = "Click here")
)
server <- function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('$$p\\left(x_j = 1|\\theta,\\alpha,\\delta_j\\right) = \\frac{e^{(\\theta-\\delta_j)}}{1 + e^{(\\theta-\\delta_j)}}$$'))
})
observeEvent(input$symbols, {
showModal(modalDialog(
title = "Symbol Definitions",
tags$head(tags$style("#shiny-modal img {max-width: 100%;}")),
tags$img(
src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/2023-02-28_14-10-27.jpg", mime = "image/jpeg"),
alt = "Table with statistical symbols"),
easyClose = TRUE,
footer = NULL
))
})
output$PL <- renderText({
paste("Note: The IPL equation only differs from the Rasch by not constraining item discrimination (α) to 1.")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
withMathJax(),
helpText('The Equation for a Rasch Model'),
uiOutput('ex1'),
textOutput("PL"),
actionButton(inputId = "symbols", label = "Click here")
)
server <- function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('$$p\\left(x_j = 1|\\theta,\\alpha,\\delta_j\\right) = \\frac{e^{(\\theta-\\delta_j)}}{1 + e^{(\\theta-\\delta_j)}}$$'))
})
observeEvent(input$symbols, {
showModal(modalDialog(
title = "Symbol Definitions",
tags$head(tags$style("#shiny-modal img {max-width: 100%;}")),
tags$img(
src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/2023-02-28_14-10-27.jpg", mime = "image/jpeg"),
alt = "Table with statistical symbols"),
easyClose = TRUE,
footer = NULL
))
})
output$PL <- renderText({
paste("Note: The IPL equation only differs from the Rasch by not constraining item discrimination (α) to 1.")
})
}
shinyApp(ui = ui, server = server)
install.packages(c("bestNormalize", "blob", "brms", "broom", "commonmark", "gss", "gtable", "Hmisc", "htmlwidgets", "insight", "ipred", "lavaan", "leaflet", "lme4", "magick", "openssl", "posterior", "psych", "rlang", "rstantools", "seriation", "sf", "survival", "testthat", "tibble", "TSP", "vctrs", "vtable", "wk"))
library(flexdashboard)
library(pacman)
pacman::p_load("knitr", "TAM", "WrightMap", "RColorBrewer", "ltm", "psych", "flexdashboard", "leaflet", thematic, shiny, shinyalert, irtoys, xtable, tinytex, xfun, plotly, ShinyItemAnalysis)
thematic::thematic_rmd()
ui <- fluidPage(
withMathJax(),
helpText('The Equation for a Rasch Model'),
uiOutput('ex1'),
textOutput("PL"),
actionButton(inputId = "symbols", label = "Click here")
)
server <- function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('$$p\\left(x_j = 1|\\theta,\\alpha,\\delta_j\\right) = \\frac{e^{(\\theta-\\delta_j)}}{1 + e^{(\\theta-\\delta_j)}}$$'))
})
observeEvent(input$symbols, {
showModal(modalDialog(
title = "Symbol Definitions",
tags$head(tags$style("#shiny-modal img {max-width: 100%;}")),
tags$img(
src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/2023-02-28_14-10-27.jpg", mime = "image/jpeg"),
alt = "Table with statistical symbols"),
easyClose = TRUE,
footer = NULL
))
})
output$PL <- renderText({
paste("Note: The IPL equation only differs from the Rasch by not constraining item discrimination (α) to 1.")
})
}
shinyApp(ui = ui, server = server)
library(flexdashboard)
library(pacman)
pacman::p_load("knitr", "TAM", "WrightMap", "RColorBrewer", "ltm", "psych", "flexdashboard", "leaflet", thematic, shiny, shinyalert, irtoys, xtable, tinytex, xfun, plotly, ShinyItemAnalysis)
thematic::thematic_rmd()
#item discrimination (needs to be fixed to 1 for Rasch model), item difficulty, and number of items
set.seed(5878)
iSim1 <- cbind(runif(20,1,1), runif(20,0,1), rep(0,20))
head(iSim1)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30))
head(iSim2)
Rmodel <- tam(iSim2)
Fit <- tam.fit(Rmodel)
summary(Fit)
PersonAbility <- Rmodel$person$EAP
Tthresh <- tam.threshold(Rmodel)
Rmodel
Rmodel$EAP.rel
Rmodel$xsi
range(Fit$itemfit$Infit)
plot(Rmodel)
itemlevelcolors <- matrix(rep(brewer.pal(4, "Set2"), 8), byrow = TRUE, ncol = 4)
wrightMap(PersonAbility,Tthresh,
show.thr.lab = FALSE,
thr.sym.cex = 2.5,
thr.sym.pch = 17,
thr.sym.col.fg = itemlevelcolors,
thr.sym.col.bg = itemlevelcolors,
main.title   = "Wright Map",
axis.logits  = "Latent Trait",
axis.persons = "Person Distribution",
axis.items   = "Survey Questions")
View(iSim2)
View(Rmodel)
plot(Rmodel$item$I1)
tracePlot(fit3PL, facet = F, legend = T) + scale_color_brewer(palette = "Set3")
library(coda)
library(flexdashboard)
library(pacman)
pacman::p_load("knitr", "TAM", "WrightMap", "RColorBrewer", "ltm", "psych", "flexdashboard", "leaflet", thematic, shiny, shinyalert, irtoys, xtable, tinytex, xfun, plotly, ShinyItemAnalysis, coda)
thematic::thematic_rmd()
tracePlot(Rmodel, facet = F, legend = T) + scale_color_brewer(palette = "Set3")
coda::tracePlot(Rmodel, facet = F, legend = T) + scale_color_brewer(palette = "Set3")
Fit <- tam.fit(Rmodel)
summary(Fit)
library(rstan)
detach("package:rstan", unload = TRUE)
coda::traceplot(Rmodel, facet = F, legend = T) + scale_color_brewer(palette = "Set3")
library(mirt)
library(flexdashboard)
library(pacman)
pacman::p_load("knitr", "TAM", "WrightMap", "RColorBrewer", "ltm", "psych", "flexdashboard", "leaflet", thematic, shiny, shinyalert, irtoys, xtable, tinytex, xfun, plotly, ShinyItemAnalysis, coda, mirt)
thematic::thematic_rmd()
FitRM <- mirt(Rmodel)
FitRM <- tam.fit(Rmodel)
summary(FitRM)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(irtoys, coda, mirt, tidyverse, ggmirt)
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(BiocManger, irtoys, coda, mirt, tidyverse, ggmirt)
install.packages("ggmirt")
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(devtools, BiocManger, irtoys, coda, mirt, tidyverse, ggmirt)
# install.packages("devtools")
devtools::install_github("masurp/ggmirt")
library(ggmirt)
library(ggmirt)
library(ggmirt)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(devtools, BiocManger, irtoys, coda, mirt, tidyverse)
pa <- cbind(runif(20,.8,2), runif(20,-2.4,2.4), rep(0,50))
head(pa)
rs <- irtoys::sim(ip=pa, x=rnorm(1000))
head(rs)
#item discrimination (needs to be fixed to 1 for Rasch model), item difficulty, and number of items
iSim1 <- cbind(runif(20,1,1), runif(20,0,1), rep(0,20))
head(pa)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30))
head(iSim2)
#item discrimination (needs to be fixed to 1 for Rasch model), item difficulty, and number of items
set.seed(5878)
iSim1 <- cbind(runif(20,1,1), runif(20,0,1), rep(0,20))
head(pa)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30))
head(iSim2)
write.matrix(iSim2,file="irtSIM.csv")
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
verbose = FALSE) # stops from printing the iterations
View(iSim2)
#rename columns for plotting
newd <- colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
head(newd)
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = newd,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
verbose = FALSE) # stops from printing the iterations
View(iSim1)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30)) %>%
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
detach("package:dplyr", unload = TRUE)
library(dplyr)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30)) %>%
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
library(magrittr)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30)) %>%
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30)) %>%
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
detach("package:magrittr", unload = TRUE)
detach("package:dplyr", unload = TRUE)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30)) %>%
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
library(dplyr)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30)) %>%
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
library(dplyr)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30)) %>%
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
install.packages("truncnorm")
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30))
head(iSim2)
#rename columns for plotting
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
head(iSim2)
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
verbose = FALSE) # stops from printing the iterations
fitRa
summary(fitRa)
paramsRa <- coef(fitRa, IRTpars = TRUE, simplify = TRUE)
paramsRa <- coef(fitRa, IRTpars = TRUE, simplify = TRUE)
View(fitRa)
paramsRa <- coef(fitRa, IRTpars = TRUE, simplify = TRUE)
ui <- fluidPage(
withMathJax(),
helpText('The Equation for a Rasch Model'),
uiOutput('ex1'),
textOutput("PL"),
actionButton(inputId = "symbols", label = "Click here")
)
server <- function(input, output, session) {
output$ex1 <- renderUI({
withMathJax(helpText('$$p\\left(x_j = 1|\\theta,\\alpha,\\delta_j\\right) = \\frac{e^{(\\theta-\\delta_j)}}{1 + e^{(\\theta-\\delta_j)}}$$'))
})
observeEvent(input$symbols, {
showModal(modalDialog(
title = "Symbol Definitions",
tags$head(tags$style("#shiny-modal img {max-width: 100%;}")),
tags$img(
src = base64enc::dataURI(file = "/Users/cassiemalcom/Desktop/CM2020/23_Winter Term Classes/EDLD 640 DS Cap/IRT4Teachers/Images/2023-02-28_14-10-27.jpg", mime = "image/jpeg"),
alt = "Table with statistical symbols"),
easyClose = TRUE,
footer = NULL
))
})
output$PL <- renderText({
paste("Note: The IPL equation only differs from the Rasch by not constraining item discrimination (α) to 1.")
})
}
shinyApp(ui = ui, server = server)
M2(fitRa)
paramsRa <- coef(fitRa, IRTpars = TRUE, simplify = TRUE)
paramsRa <- coef(fitRa, IRTpars = TRUE, simplify = TRUE, nfact = 1)
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2,
model = 1,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
verbose = FALSE) # stops from printing the iterations
fitRa
summary(fitRa)
paramsRa <- coef(fitRa, IRTpars = TRUE, simplify = TRUE, nfact = 1)
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2,
model = 1,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE,
verbose = FALSE) # stops from printing the iterations
fitRa
summary(fitRa)
coef.rasch <- coef(results.rasch, IRTpars=TRUE, simplify=TRUE)
coef.rasch <- coef(fitRa, IRTpars=TRUE, simplify=TRUE)
coef.rasch <- coef(fitRa, IRTpars=TRUE, simplify=TRUE)
coef.rasch <- coef(fitRa, IRTpars=TRUE, simplify=TRUE)
View(fitRa)
coef.rasch <- coef(fitRa, IRTpars=TRUE, simplify=TRUE, nfact = 1)
coef.rasch <- coef(fitRa, IRTpars=TRUE, simplify=TRUE, nfact = TRUE)
coef.rasch <- coef(fitRa, IRTpars=TRUE, simplify=TRUE)
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2,
model = 1,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE,
nfact = 1,
verbose = FALSE) # stops from printing the iterations
fitRa
coef.rasch <- coef(fitRa, IRTpars=TRUE, simplify=TRUE)
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2, nfact,
model = 1,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE,
verbose = FALSE) # stops from printing the iterations
View(fitRa)
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2, 1,
model = 1,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE,
verbose = FALSE) # stops from printing the iterations
unimodel <- 'F1 = 1-20'
fitRa <- mirt((data = iSim2, 1),
unimodel <- 'F1 = 1-20'
fitRa <- mirt((data = iSim2, 1),
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE,
verbose = FALSE) # stops from printing the iterations
fitRa
unimodel <- 'F1 = 1-20'
fitRa <- mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
verbose = FALSE) # stops from printing the iterations
fitRa
summary(fitRa)
# IRT parameters from the estimated model. For this example, we are obtaining simplified output without SEs/CIs (simplify = TRUE) for conventional IRT parameters (IRTpar = TRUE).
coef(fitRa,simplify = TRUE, IRTpar = TRUE)$items
unimodel <- 'F1 = 1-20'
fitRa <- mirt::mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
verbose = FALSE) # stops from printing the iterations
fitRa
summary(fitRa)
# IRT parameters from the estimated model. For this example, we are obtaining simplified output without SEs/CIs (simplify = TRUE) for conventional IRT parameters (IRTpar = TRUE).
coef(fitRa,simplify = TRUE, IRTpar = TRUE)$items
# IRT parameters from the estimated model. For this example, we are obtaining simplified output without SEs/CIs (simplify = TRUE) for conventional IRT parameters (IRTpar = TRUE).
coef(fitRa,simplify = TRUE, IRTpar = TRUE, nfact = 1)$items
# install.packages("devtools")
devtools::install_github("philchalmers/ggmirt")
# install.packages("devtools")
devtools::install_github("philchalmers/mirt")
library(mirt)
pa <- cbind(runif(20,.8,2), runif(20,-2.4,2.4), rep(0,50))
head(pa)
rs <- irtoys::sim(ip=pa, x=rnorm(1000))
head(rs)
#item discrimination (needs to be fixed to 1 for Rasch model), item difficulty, and number of items
set.seed(5878)
iSim1 <- cbind(runif(20,1,1), runif(20,0,1), rep(0,20))
head(pa)
set.seed(5878)
iSim2 <- irtoys::sim(ip=iSim1, x=rnorm(30))
head(iSim2)
#rename columns for plotting
colnames(iSim2) <- c("Item 1","Item 2","Item 3","Item 4","Item 5","Item 6","Item 7","Item 8", "Item 9", "Item 10", "Item 11", "Item 12", "Item 13", "Item 14", "Item 15", "Item 16", "Item 17", "Item 18", "Item 19", "Item 20")
head(iSim2)
unimodel <- 'F1 = 1-20'
fitRa <- mirt::mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
verbose = FALSE) # stops from printing the iterations
fitRa
summary(fitRa)
# IRT parameters from the estimated model. For this example, we are obtaining simplified output without SEs/CIs (simplify = TRUE) for conventional IRT parameters (IRTpar = TRUE).
coef(fitRa,simplify = TRUE, IRTpar = TRUE)$items
unimodel <- mirt.model("latent = 1-20")
fitRa <- mirt::mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
verbose = FALSE) # stops from printing the iterations
fitRa
summary(fitRa)
# IRT parameters from the estimated model. For this example, we are obtaining simplified output without SEs/CIs (simplify = TRUE) for conventional IRT parameters (IRTpar = TRUE).
coef(fitRa,simplify = TRUE, IRTpar = TRUE)$items
unimodel <- mirt.model("latent = 1-20")
fitRa <- mirt::mirt(data = iSim2,
model = unimodel,  # alternatively, we could also just specify model = 1 in this case
itemtype = "Rasch",
SE = TRUE) # stops from printing the iterations
fitRa
summary(fitRa)
# IRT parameters from the estimated model. For this example, we are obtaining simplified output without SEs/CIs (simplify = TRUE) for conventional IRT parameters (IRTpar = TRUE).
coef(fitRa,simplify = TRUE, IRTpar = TRUE)$items
